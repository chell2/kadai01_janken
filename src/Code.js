// e:Âèó‰ø°„É°„ÉÉ„Çª„Éº„Ç∏
function doPost(e) {
  if (typeof e === 'undefined') {
    Logger.log('undefined');
    return;
  }

  const json = JSON.parse(e.postData.contents);
  for (let i = 0; i < json.events.length; i++) {
    const reply_token = json.events[i].replyToken;
    const userId = json.events[i].source.userId;
    const messageType = json.events[i].message.type;
    const messageText = json.events[i].message.text;

    if (messageType === 'text') {
      const userText = messageText;
      const userState = getUserState(userId);

      if (userState === 'Registering') {
        // ÁôªÈå≤‰∏≠„ÅÆÂá¶ÁêÜ
        // „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊîπË°å„Åî„Å®„Å´ÂàÜÂâ≤
        const all_msg = userText.split('\n');
        const sheet =
          SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('Bars');
        const now = new Date();
        const row = [userId, all_msg[0], all_msg[1], all_msg[2], now];
        sheet.appendRow(row);
        sendReply(reply_token, 'ÁôªÈå≤ÂÆå‰∫ÜÔºÅ');
        saveUserState(userId, null);
      } else if (userState === 'Searching') {
        // Â†¥ÊâÄ„Åã„ÇâÊ§úÁ¥¢‰∏≠„ÅÆÂá¶ÁêÜ
        const query = messageText;
        const results = searchBars(query, userId);
        sendReply(reply_token, results);
        saveUserState(userId, null);
      } else {
        // ÈÄöÂ∏∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ
        switch (userText) {
          case '„Åç„Çç„Åè':
            sendReply(
              reply_token,
              '„ÅäÂ∫ó„ÅÆURL„ÄÅÂà©Áî®„Åó„Åü„ÅÑ‰∫∫Êï∞ÔºàÊï∞Â≠ó„ÅÆ„ÅøÔºâ„ÄÅÂ†¥ÊâÄ„ÇíÈ†Ü„Å´ÂÖ•Âäõ„Åó„Å¶„Å≠'
            );
            saveUserState(userId, 'Registering');
            break;
          case '„Åï„Åå„Åô':
            sendReply(reply_token, '„Å©„ÅÆËæ∫„Çä„ÅßÊé¢„Åó„Å¶„Çã„ÅÆÔºü');
            saveUserState(userId, 'Searching');
            break;
          case '„Å≤„Å®„Çä':
            sendReply(reply_token, '„Åï„Åè„Å£„Å®ÁµêÊûú„ÇíË°®Á§∫');
            break;
          case '„Åµ„Åü„Çä':
            sendReply(reply_token, '„Åó„Å£„ÅΩ„ÇäÁµêÊûú„ÇíË°®Á§∫');
            break;
          case '„Åø„Çì„Å™':
            sendReply(reply_token, '„Çè„ÅÑ„Çè„ÅÑÁµêÊûú„ÇíË°®Á§∫');
            break;
          default:
            sendReply(
              reply_token,
              '„Ç¥„É°„É≥„ÉÅ„Éß„ÉÉ„Éà„Éä„Éã„Ç§„ÉÉ„ÉÜ„É´„Ç´„ÉØ„Ç´„É©„Éä„Ç§...üòá„É°„Éã„É•„Éº„Åã„ÇâÈÅ∏„Çì„Åß„Åø„Å¶„Äú'
            );
            break;
        }
      }
    }
  }
}

function searchBars(query, userId) {
  const sheet =
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(BARS_SHEET_NAME);
  const data = sheet.getDataRange().getValues();
  let matchingBars = [];

  // ÂÖ®„Å¶„ÅÆ„Éê„Éº„ÇíÊ§úÁ¥¢
  data.forEach((row, index) => {
    if (index === 0) return; // „Éò„ÉÉ„ÉÄ„ÉºË°å„Çí„Çπ„Ç≠„ÉÉ„Éó
    const [registeredUserId, url, number, location, registeredDate] = row;

    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Êù°‰ª∂
    if (
      query.includes(location) ||
      (number === '1' && query.includes('„Å≤„Å®„Çä')) ||
      (number === '2' && query.includes('„Åµ„Åü„Çä')) ||
      (number >= '3' && query.includes('„Åø„Çì„Å™'))
    ) {
      matchingBars.push({
        userId: registeredUserId,
        url: url,
        number: number,
        location: location,
        registeredDate: registeredDate,
      });
    }
  });

  // „É©„É≥„ÉÄ„É†„Å´ÊúÄÂ§ß3„Å§„ÅÆÂÄôË£ú„ÇíÈÅ∏Êäû
  const selectedBars = selectRandomBars(matchingBars, 3);

  // ÁµêÊûú„ÇíÊï¥ÂΩ¢
  let recommendations = '';
  selectedBars.forEach((bar) => {
    recommendations += `${bar.url}, ‰∫∫Êï∞: ${bar.number}, Â†¥ÊâÄ: ${
      bar.location
    }, ÁôªÈå≤Êó•: ${new Date(bar.registeredDate).toLocaleDateString()}\n`;
  });

  return recommendations || 'ÁôªÈå≤„Åï„Çå„Åü„ÅäÂ∫ó„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ';
}

function selectRandomBars(bars, maxCount) {
  // „É©„É≥„ÉÄ„É†„Å´Ë¶ÅÁ¥†„ÇíÈÅ∏„Å∂
  const shuffled = bars.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, maxCount);
}
